/**
 * Use this file to implement business logic. This file will be preserved
 * during next compilations.
 * <p>
 * Generated by: silvera
 * Date: 2022-05-07 18:43:22
 */

package com.silvera.SciPaper.service.impl;

import com.silvera.SciPaper.domain.model.SciPaper;
import com.silvera.SciPaper.domain.model.Section;
import com.silvera.SciPaper.domain.model.UploadPaperDto;
import com.silvera.SciPaper.exception.NoSuchSciPaperException;
import com.silvera.SciPaper.exception.NotFoundException;
import com.silvera.SciPaper.exception.UserNotLoggedInException;
import com.silvera.SciPaper.repository.SciPaperRepository;
import com.silvera.SciPaper.repository.SectionRepository;
import com.silvera.SciPaper.service.base.ISciPaperService;
import com.silvera.SciPaper.service.dependencies.UserClient;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.stereotype.Service;

import java.util.Optional;


@Service
public class SciPaperService implements ISciPaperService {


    @Autowired
    SciPaperRepository scipaperRepository;


    @Autowired
    SectionRepository sectionRepository;


    @Autowired
    UserClient userClient;


    @Autowired
    KafkaTemplate<String, com.silvera.SciPaper.messages.papermsggroup.PaperPublished> papermsggroupPaperPublishedKafkaTemplate;


    // Auto-generated CRUD methods

    @Override
    public SciPaper createSciPaper(SciPaper scipaper) {
        scipaperRepository.save(scipaper);
        Optional<SciPaper> opt = scipaperRepository.findById(scipaper.getId());
        return opt.orElse(null);
    }

    @Override
    public SciPaper updateSciPaper(java.lang.String id, SciPaper scipaperUpdate) {
        SciPaper entity = this.readSciPaper(id);
        scipaperRepository.save(scipaperUpdate);
        return scipaperUpdate;
    }

    @Override
    public SciPaper readSciPaper(java.lang.String id) {
        Optional<SciPaper> opt = scipaperRepository.findById(id);
        return opt.orElseThrow(IllegalArgumentException::new);
    }

    @Override
    public void deleteSciPaper(java.lang.String id) {
        SciPaper entity = readSciPaper(id);
        scipaperRepository.delete(entity);
    }


    @Override
    public Section createSection(Section section) {
        sectionRepository.save(section);
        Optional<Section> opt = sectionRepository.findById(section.getId());
        return opt.orElse(null);
    }

    @Override
    public Section updateSection(java.lang.String id, Section sectionUpdate) {
        Section entity = this.readSection(id);
        sectionRepository.save(sectionUpdate);
        return sectionUpdate;
    }

    @Override
    public Section readSection(java.lang.String id) {
        Optional<Section> opt = sectionRepository.findById(id);
        return opt.orElseThrow(IllegalArgumentException::new);
    }

    @Override
    public void deleteSection(java.lang.String id) {
        Section entity = readSection(id);
        sectionRepository.delete(entity);
    }

    @Override
    public SciPaper uploadSciPaper(String username, UploadPaperDto dto) {
        if (!checkIfLoggedIn(username)) {
            throw new UserNotLoggedInException("Please log in first");
        }
        String author = getAuthor(username);
        SciPaper sci = new SciPaper();
        sci.setAuthor(author);
        sci.setTitle(dto.getTitle());
        sci.setSections(dto.getSections());

        SciPaper retVal = scipaperRepository.save(sci);
        this.publishPaper(retVal);
        return retVal;
    }

    @Override
    public java.util.List<SciPaper> getAll() {
        return scipaperRepository.findAll();
    }


    @Override
    public SciPaper getOne(java.lang.String id) {
        return scipaperRepository.findById(id).orElseThrow(NoSuchSciPaperException::new);
    }

    @Override
    public void publishPaper(SciPaper sciPaper) {

        com.silvera.SciPaper.messages.papermsggroup.PaperPublished msg =
                new com.silvera.SciPaper.messages.papermsggroup.PaperPublished();

        msg.setAuthor(sciPaper.getAuthor());
        msg.setTitle(sciPaper.getTitle());
        msg.setPaperId(sciPaper.getId());

        papermsggroupPaperPublishedKafkaTemplate.send("PAPER_PUBLISHED_CHANNEL", msg);
    }

    private boolean checkIfLoggedIn(String username) {
        return userClient.isLoggedIn(username);
    }

    private String getAuthor(String username) {
        String author = userClient.getName(username);
        if (author == null)
            throw new NotFoundException("Author not found");
        return author;
    }


}