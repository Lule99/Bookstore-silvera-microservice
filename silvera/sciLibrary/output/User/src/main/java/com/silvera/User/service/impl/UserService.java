/**
 * Use this file to implement business logic. This file will be preserved
 * during next compilations.
 * <p>
 * Generated by: silvera
 * Date: 2022-05-07 15:29:15
 */

package com.silvera.User.service.impl;

import com.silvera.User.domain.model.LoginDto;
import com.silvera.User.domain.model.User;
import com.silvera.User.exceptions.InvalidCredentialsException;
import com.silvera.User.exceptions.NoSuchUserException;
import com.silvera.User.repository.UserRepository;
import com.silvera.User.service.base.IUserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.annotation.PostConstruct;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;


@Service
public class UserService implements IUserService {


    @Autowired
    UserRepository userRepository;

    private List<User> loggedIn;

    @PostConstruct
    public void setup() {
        loggedIn = new ArrayList<>();
    }

    public UserService() {
        super();
    }

    // Auto-generated CRUD methods


    @Override
    public User createUser(User user) {
        userRepository.save(user);
        Optional<User> opt = userRepository.findById(user.getId());
        return opt.orElse(null);
    }

    @Override
    public User updateUser(java.lang.String id, User userUpdate) {
        User entity = this.readUser(id);
        userRepository.save(userUpdate);
        return userUpdate;
    }

    @Override
    public User readUser(java.lang.String id) {
        Optional<User> opt = userRepository.findById(id);
        return opt.orElseThrow(IllegalArgumentException::new);
    }

    @Override
    public void deleteUser(java.lang.String id) {
        User entity = readUser(id);
        userRepository.delete(entity);
    }


    @Override
    public User register(User user) {
        return createUser(user);
    }

    @Override
    public User login(LoginDto loginDto) {
        User user = userRepository.findById(loginDto.getUsername())
                .orElseThrow(InvalidCredentialsException::new);
        if (user.getPassword().equals(loginDto.getPassword())) {
            loggedIn.add(user);
            return user;
        }
        throw new InvalidCredentialsException();
    }


    @Override
    public void logout(java.lang.String username) {
        loggedIn.removeIf(u -> u.getUsername().equals(username));
    }


    @Override
    public java.util.List<User> getAllUsers() {
        return userRepository.findAll();
    }


    @Override
    public java.lang.Boolean isLoggedIn(java.lang.String username) {
        return loggedIn.stream().anyMatch(u -> u.getUsername().equals(username));

    }


    @Override
    public java.lang.String getName(java.lang.String username) {
        User user = userRepository.findById(username)
                .orElseThrow(NoSuchUserException::new);
        return user.getFirstName();
    }


}